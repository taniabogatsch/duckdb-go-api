//===----------------------------------------------------------------------===//
//
//                         DuckDB
//
// go_duckdb_extension.h
//
//
//===----------------------------------------------------------------------===//
//
// !!!!!!!
// WARNING: this file is autogenerated by scripts/generate_go_api.py, manual changes will be overwritten
// !!!!!!!

#include "go_duckdb.h"
//===--------------------------------------------------------------------===//
// Function pointer struct
//===--------------------------------------------------------------------===//
typedef struct {
	duckdb_state (*duckdb_open)(const char *path, duckdb_database *out_database);
	duckdb_state (*duckdb_open_ext)(const char *path, duckdb_database *out_database, duckdb_config config,
	                                char **out_error);
	void (*duckdb_close)(duckdb_database *database);
	duckdb_state (*duckdb_connect)(duckdb_database database, duckdb_connection *out_connection);
	void (*duckdb_interrupt)(duckdb_connection connection);
	duckdb_query_progress_type (*duckdb_query_progress)(duckdb_connection connection);
	void (*duckdb_disconnect)(duckdb_connection *connection);
	const char *(*duckdb_library_version)();
	duckdb_state (*duckdb_create_config)(duckdb_config *out_config);
	size_t (*duckdb_config_count)();
	duckdb_state (*duckdb_get_config_flag)(size_t index, const char **out_name, const char **out_description);
	duckdb_state (*duckdb_set_config)(duckdb_config config, const char *name, const char *option);
	void (*duckdb_destroy_config)(duckdb_config *config);
	duckdb_state (*duckdb_query)(duckdb_connection connection, const char *query, duckdb_result *out_result);
	void (*duckdb_destroy_result)(duckdb_result *result);
	const char *(*duckdb_column_name)(duckdb_result *result, idx_t col);
	duckdb_type (*duckdb_column_type)(duckdb_result *result, idx_t col);
	duckdb_statement_type (*duckdb_result_statement_type)(duckdb_result result);
	duckdb_logical_type (*duckdb_column_logical_type)(duckdb_result *result, idx_t col);
	idx_t (*duckdb_column_count)(duckdb_result *result);
	idx_t (*duckdb_rows_changed)(duckdb_result *result);
	const char *(*duckdb_result_error)(duckdb_result *result);
	void *(*duckdb_malloc)(size_t size);
	void (*duckdb_free)(void *ptr);
	idx_t (*duckdb_vector_size)();
	bool (*duckdb_string_is_inlined)(duckdb_string_t string);
	duckdb_date_struct (*duckdb_from_date)(duckdb_date date);
	duckdb_date (*duckdb_to_date)(duckdb_date_struct date);
	bool (*duckdb_is_finite_date)(duckdb_date date);
	duckdb_time_struct (*duckdb_from_time)(duckdb_time time);
	duckdb_time_tz (*duckdb_create_time_tz)(int64_t micros, int32_t offset);
	duckdb_time_tz_struct (*duckdb_from_time_tz)(duckdb_time_tz micros);
	duckdb_time (*duckdb_to_time)(duckdb_time_struct time);
	duckdb_timestamp_struct (*duckdb_from_timestamp)(duckdb_timestamp ts);
	duckdb_timestamp (*duckdb_to_timestamp)(duckdb_timestamp_struct ts);
	bool (*duckdb_is_finite_timestamp)(duckdb_timestamp ts);
	double (*duckdb_hugeint_to_double)(duckdb_hugeint val);
	duckdb_hugeint (*duckdb_double_to_hugeint)(double val);
	double (*duckdb_uhugeint_to_double)(duckdb_uhugeint val);
	duckdb_uhugeint (*duckdb_double_to_uhugeint)(double val);
	duckdb_decimal (*duckdb_double_to_decimal)(double val, uint8_t width, uint8_t scale);
	double (*duckdb_decimal_to_double)(duckdb_decimal val);
	duckdb_state (*duckdb_prepare)(duckdb_connection connection, const char *query,
	                               duckdb_prepared_statement *out_prepared_statement);
	void (*duckdb_destroy_prepare)(duckdb_prepared_statement *prepared_statement);
	const char *(*duckdb_prepare_error)(duckdb_prepared_statement prepared_statement);
	idx_t (*duckdb_nparams)(duckdb_prepared_statement prepared_statement);
	const char *(*duckdb_parameter_name)(duckdb_prepared_statement prepared_statement, idx_t index);
	duckdb_type (*duckdb_param_type)(duckdb_prepared_statement prepared_statement, idx_t param_idx);
	duckdb_state (*duckdb_clear_bindings)(duckdb_prepared_statement prepared_statement);
	duckdb_statement_type (*duckdb_prepared_statement_type)(duckdb_prepared_statement statement);
	duckdb_state (*duckdb_bind_value)(duckdb_prepared_statement prepared_statement, idx_t param_idx, duckdb_value val);
	duckdb_state (*duckdb_bind_parameter_index)(duckdb_prepared_statement prepared_statement, idx_t *param_idx_out,
	                                            const char *name);
	duckdb_state (*duckdb_bind_boolean)(duckdb_prepared_statement prepared_statement, idx_t param_idx, bool val);
	duckdb_state (*duckdb_bind_int8)(duckdb_prepared_statement prepared_statement, idx_t param_idx, int8_t val);
	duckdb_state (*duckdb_bind_int16)(duckdb_prepared_statement prepared_statement, idx_t param_idx, int16_t val);
	duckdb_state (*duckdb_bind_int32)(duckdb_prepared_statement prepared_statement, idx_t param_idx, int32_t val);
	duckdb_state (*duckdb_bind_int64)(duckdb_prepared_statement prepared_statement, idx_t param_idx, int64_t val);
	duckdb_state (*duckdb_bind_hugeint)(duckdb_prepared_statement prepared_statement, idx_t param_idx,
	                                    duckdb_hugeint val);
	duckdb_state (*duckdb_bind_uhugeint)(duckdb_prepared_statement prepared_statement, idx_t param_idx,
	                                     duckdb_uhugeint val);
	duckdb_state (*duckdb_bind_decimal)(duckdb_prepared_statement prepared_statement, idx_t param_idx,
	                                    duckdb_decimal val);
	duckdb_state (*duckdb_bind_uint8)(duckdb_prepared_statement prepared_statement, idx_t param_idx, uint8_t val);
	duckdb_state (*duckdb_bind_uint16)(duckdb_prepared_statement prepared_statement, idx_t param_idx, uint16_t val);
	duckdb_state (*duckdb_bind_uint32)(duckdb_prepared_statement prepared_statement, idx_t param_idx, uint32_t val);
	duckdb_state (*duckdb_bind_uint64)(duckdb_prepared_statement prepared_statement, idx_t param_idx, uint64_t val);
	duckdb_state (*duckdb_bind_float)(duckdb_prepared_statement prepared_statement, idx_t param_idx, float val);
	duckdb_state (*duckdb_bind_double)(duckdb_prepared_statement prepared_statement, idx_t param_idx, double val);
	duckdb_state (*duckdb_bind_date)(duckdb_prepared_statement prepared_statement, idx_t param_idx, duckdb_date val);
	duckdb_state (*duckdb_bind_time)(duckdb_prepared_statement prepared_statement, idx_t param_idx, duckdb_time val);
	duckdb_state (*duckdb_bind_timestamp)(duckdb_prepared_statement prepared_statement, idx_t param_idx,
	                                      duckdb_timestamp val);
	duckdb_state (*duckdb_bind_timestamp_tz)(duckdb_prepared_statement prepared_statement, idx_t param_idx,
	                                         duckdb_timestamp val);
	duckdb_state (*duckdb_bind_interval)(duckdb_prepared_statement prepared_statement, idx_t param_idx,
	                                     duckdb_interval val);
	duckdb_state (*duckdb_bind_varchar)(duckdb_prepared_statement prepared_statement, idx_t param_idx, const char *val);
	duckdb_state (*duckdb_bind_varchar_length)(duckdb_prepared_statement prepared_statement, idx_t param_idx,
	                                           const char *val, idx_t length);
	duckdb_state (*duckdb_bind_blob)(duckdb_prepared_statement prepared_statement, idx_t param_idx, const void *data,
	                                 idx_t length);
	duckdb_state (*duckdb_bind_null)(duckdb_prepared_statement prepared_statement, idx_t param_idx);
	duckdb_state (*duckdb_execute_prepared)(duckdb_prepared_statement prepared_statement, duckdb_result *out_result);
	idx_t (*duckdb_extract_statements)(duckdb_connection connection, const char *query,
	                                   duckdb_extracted_statements *out_extracted_statements);
	duckdb_state (*duckdb_prepare_extracted_statement)(duckdb_connection connection,
	                                                   duckdb_extracted_statements extracted_statements, idx_t index,
	                                                   duckdb_prepared_statement *out_prepared_statement);
	const char *(*duckdb_extract_statements_error)(duckdb_extracted_statements extracted_statements);
	void (*duckdb_destroy_extracted)(duckdb_extracted_statements *extracted_statements);
	duckdb_state (*duckdb_pending_prepared)(duckdb_prepared_statement prepared_statement,
	                                        duckdb_pending_result *out_result);
	void (*duckdb_destroy_pending)(duckdb_pending_result *pending_result);
	const char *(*duckdb_pending_error)(duckdb_pending_result pending_result);
	duckdb_pending_state (*duckdb_pending_execute_task)(duckdb_pending_result pending_result);
	duckdb_pending_state (*duckdb_pending_execute_check_state)(duckdb_pending_result pending_result);
	duckdb_state (*duckdb_execute_pending)(duckdb_pending_result pending_result, duckdb_result *out_result);
	bool (*duckdb_pending_execution_is_finished)(duckdb_pending_state pending_state);
	void (*duckdb_destroy_value)(duckdb_value *value);
	duckdb_value (*duckdb_create_varchar)(const char *text);
	duckdb_value (*duckdb_create_varchar_length)(const char *text, idx_t length);
	duckdb_value (*duckdb_create_int64)(int64_t val);
	duckdb_value (*duckdb_create_struct_value)(duckdb_logical_type type, duckdb_value *values);
	duckdb_value (*duckdb_create_list_value)(duckdb_logical_type type, duckdb_value *values, idx_t value_count);
	duckdb_value (*duckdb_create_array_value)(duckdb_logical_type type, duckdb_value *values, idx_t value_count);
	char *(*duckdb_get_varchar)(duckdb_value value);
	int64_t (*duckdb_get_int64)(duckdb_value val);
	duckdb_logical_type (*duckdb_create_logical_type)(duckdb_type type);
	char *(*duckdb_logical_type_get_alias)(duckdb_logical_type type);
	duckdb_logical_type (*duckdb_create_list_type)(duckdb_logical_type type);
	duckdb_logical_type (*duckdb_create_array_type)(duckdb_logical_type type, idx_t array_size);
	duckdb_logical_type (*duckdb_create_map_type)(duckdb_logical_type key_type, duckdb_logical_type value_type);
	duckdb_logical_type (*duckdb_create_union_type)(duckdb_logical_type *member_types, const char **member_names,
	                                                idx_t member_count);
	duckdb_logical_type (*duckdb_create_struct_type)(duckdb_logical_type *member_types, const char **member_names,
	                                                 idx_t member_count);
	duckdb_logical_type (*duckdb_create_enum_type)(const char **member_names, idx_t member_count);
	duckdb_logical_type (*duckdb_create_decimal_type)(uint8_t width, uint8_t scale);
	duckdb_type (*duckdb_get_type_id)(duckdb_logical_type type);
	uint8_t (*duckdb_decimal_width)(duckdb_logical_type type);
	uint8_t (*duckdb_decimal_scale)(duckdb_logical_type type);
	duckdb_type (*duckdb_decimal_internal_type)(duckdb_logical_type type);
	duckdb_type (*duckdb_enum_internal_type)(duckdb_logical_type type);
	uint32_t (*duckdb_enum_dictionary_size)(duckdb_logical_type type);
	char *(*duckdb_enum_dictionary_value)(duckdb_logical_type type, idx_t index);
	duckdb_logical_type (*duckdb_list_type_child_type)(duckdb_logical_type type);
	duckdb_logical_type (*duckdb_array_type_child_type)(duckdb_logical_type type);
	idx_t (*duckdb_array_type_array_size)(duckdb_logical_type type);
	duckdb_logical_type (*duckdb_map_type_key_type)(duckdb_logical_type type);
	duckdb_logical_type (*duckdb_map_type_value_type)(duckdb_logical_type type);
	idx_t (*duckdb_struct_type_child_count)(duckdb_logical_type type);
	char *(*duckdb_struct_type_child_name)(duckdb_logical_type type, idx_t index);
	duckdb_logical_type (*duckdb_struct_type_child_type)(duckdb_logical_type type, idx_t index);
	idx_t (*duckdb_union_type_member_count)(duckdb_logical_type type);
	char *(*duckdb_union_type_member_name)(duckdb_logical_type type, idx_t index);
	duckdb_logical_type (*duckdb_union_type_member_type)(duckdb_logical_type type, idx_t index);
	void (*duckdb_destroy_logical_type)(duckdb_logical_type *type);
	duckdb_data_chunk (*duckdb_fetch_chunk)(duckdb_result result);
	duckdb_data_chunk (*duckdb_create_data_chunk)(duckdb_logical_type *types, idx_t column_count);
	void (*duckdb_destroy_data_chunk)(duckdb_data_chunk *chunk);
	void (*duckdb_data_chunk_reset)(duckdb_data_chunk chunk);
	idx_t (*duckdb_data_chunk_get_column_count)(duckdb_data_chunk chunk);
	duckdb_vector (*duckdb_data_chunk_get_vector)(duckdb_data_chunk chunk, idx_t col_idx);
	idx_t (*duckdb_data_chunk_get_size)(duckdb_data_chunk chunk);
	void (*duckdb_data_chunk_set_size)(duckdb_data_chunk chunk, idx_t size);
	duckdb_logical_type (*duckdb_vector_get_column_type)(duckdb_vector vector);
	void *(*duckdb_vector_get_data)(duckdb_vector vector);
	uint64_t *(*duckdb_vector_get_validity)(duckdb_vector vector);
	void (*duckdb_vector_ensure_validity_writable)(duckdb_vector vector);
	void (*duckdb_vector_assign_string_element)(duckdb_vector vector, idx_t index, const char *str);
	void (*duckdb_vector_assign_string_element_len)(duckdb_vector vector, idx_t index, const char *str, idx_t str_len);
	duckdb_vector (*duckdb_list_vector_get_child)(duckdb_vector vector);
	idx_t (*duckdb_list_vector_get_size)(duckdb_vector vector);
	duckdb_state (*duckdb_list_vector_set_size)(duckdb_vector vector, idx_t size);
	duckdb_state (*duckdb_list_vector_reserve)(duckdb_vector vector, idx_t required_capacity);
	duckdb_vector (*duckdb_struct_vector_get_child)(duckdb_vector vector, idx_t index);
	duckdb_vector (*duckdb_array_vector_get_child)(duckdb_vector vector);
	bool (*duckdb_validity_row_is_valid)(uint64_t *validity, idx_t row);
	void (*duckdb_validity_set_row_validity)(uint64_t *validity, idx_t row, bool valid);
	void (*duckdb_validity_set_row_invalid)(uint64_t *validity, idx_t row);
	void (*duckdb_validity_set_row_valid)(uint64_t *validity, idx_t row);
	duckdb_scalar_function (*duckdb_create_scalar_function)();
	void (*duckdb_destroy_scalar_function)(duckdb_scalar_function *scalar_function);
	void (*duckdb_scalar_function_set_name)(duckdb_scalar_function scalar_function, const char *name);
	void (*duckdb_scalar_function_add_parameter)(duckdb_scalar_function scalar_function, duckdb_logical_type type);
	void (*duckdb_scalar_function_set_return_type)(duckdb_scalar_function scalar_function, duckdb_logical_type type);
	void (*duckdb_scalar_function_set_extra_info)(duckdb_scalar_function scalar_function, void *extra_info,
	                                              duckdb_delete_callback_t destroy);
	void (*duckdb_scalar_function_set_function)(duckdb_scalar_function scalar_function,
	                                            duckdb_scalar_function_t function);
	duckdb_state (*duckdb_register_scalar_function)(duckdb_connection con, duckdb_scalar_function scalar_function);
	duckdb_table_function (*duckdb_create_table_function)();
	void (*duckdb_destroy_table_function)(duckdb_table_function *table_function);
	void (*duckdb_table_function_set_name)(duckdb_table_function table_function, const char *name);
	void (*duckdb_table_function_add_parameter)(duckdb_table_function table_function, duckdb_logical_type type);
	void (*duckdb_table_function_add_named_parameter)(duckdb_table_function table_function, const char *name,
	                                                  duckdb_logical_type type);
	void (*duckdb_table_function_set_extra_info)(duckdb_table_function table_function, void *extra_info,
	                                             duckdb_delete_callback_t destroy);
	void (*duckdb_table_function_set_bind)(duckdb_table_function table_function, duckdb_table_function_bind_t bind);
	void (*duckdb_table_function_set_init)(duckdb_table_function table_function, duckdb_table_function_init_t init);
	void (*duckdb_table_function_set_local_init)(duckdb_table_function table_function,
	                                             duckdb_table_function_init_t init);
	void (*duckdb_table_function_set_function)(duckdb_table_function table_function, duckdb_table_function_t function);
	void (*duckdb_table_function_supports_projection_pushdown)(duckdb_table_function table_function, bool pushdown);
	duckdb_state (*duckdb_register_table_function)(duckdb_connection con, duckdb_table_function function);
	void *(*duckdb_bind_get_extra_info)(duckdb_bind_info info);
	void (*duckdb_bind_add_result_column)(duckdb_bind_info info, const char *name, duckdb_logical_type type);
	idx_t (*duckdb_bind_get_parameter_count)(duckdb_bind_info info);
	duckdb_value (*duckdb_bind_get_parameter)(duckdb_bind_info info, idx_t index);
	duckdb_value (*duckdb_bind_get_named_parameter)(duckdb_bind_info info, const char *name);
	void (*duckdb_bind_set_bind_data)(duckdb_bind_info info, void *bind_data, duckdb_delete_callback_t destroy);
	void (*duckdb_bind_set_cardinality)(duckdb_bind_info info, idx_t cardinality, bool is_exact);
	void (*duckdb_bind_set_error)(duckdb_bind_info info, const char *error);
	void *(*duckdb_init_get_extra_info)(duckdb_init_info info);
	void *(*duckdb_init_get_bind_data)(duckdb_init_info info);
	void (*duckdb_init_set_init_data)(duckdb_init_info info, void *init_data, duckdb_delete_callback_t destroy);
	idx_t (*duckdb_init_get_column_count)(duckdb_init_info info);
	idx_t (*duckdb_init_get_column_index)(duckdb_init_info info, idx_t column_index);
	void (*duckdb_init_set_max_threads)(duckdb_init_info info, idx_t max_threads);
	void (*duckdb_init_set_error)(duckdb_init_info info, const char *error);
	void *(*duckdb_function_get_extra_info)(duckdb_function_info info);
	void *(*duckdb_function_get_bind_data)(duckdb_function_info info);
	void *(*duckdb_function_get_init_data)(duckdb_function_info info);
	void *(*duckdb_function_get_local_init_data)(duckdb_function_info info);
	void (*duckdb_function_set_error)(duckdb_function_info info, const char *error);
	void (*duckdb_add_replacement_scan)(duckdb_database db, duckdb_replacement_callback_t replacement, void *extra_data,
	                                    duckdb_delete_callback_t delete_callback);
	void (*duckdb_replacement_scan_set_function_name)(duckdb_replacement_scan_info info, const char *function_name);
	void (*duckdb_replacement_scan_add_parameter)(duckdb_replacement_scan_info info, duckdb_value parameter);
	void (*duckdb_replacement_scan_set_error)(duckdb_replacement_scan_info info, const char *error);
	duckdb_state (*duckdb_appender_create)(duckdb_connection connection, const char *schema, const char *table,
	                                       duckdb_appender *out_appender);
	idx_t (*duckdb_appender_column_count)(duckdb_appender appender);
	duckdb_logical_type (*duckdb_appender_column_type)(duckdb_appender appender, idx_t col_idx);
	const char *(*duckdb_appender_error)(duckdb_appender appender);
	duckdb_state (*duckdb_appender_flush)(duckdb_appender appender);
	duckdb_state (*duckdb_appender_close)(duckdb_appender appender);
	duckdb_state (*duckdb_appender_destroy)(duckdb_appender *appender);
	duckdb_state (*duckdb_appender_begin_row)(duckdb_appender appender);
	duckdb_state (*duckdb_appender_end_row)(duckdb_appender appender);
	duckdb_state (*duckdb_append_default)(duckdb_appender appender);
	duckdb_state (*duckdb_append_bool)(duckdb_appender appender, bool value);
	duckdb_state (*duckdb_append_int8)(duckdb_appender appender, int8_t value);
	duckdb_state (*duckdb_append_int16)(duckdb_appender appender, int16_t value);
	duckdb_state (*duckdb_append_int32)(duckdb_appender appender, int32_t value);
	duckdb_state (*duckdb_append_int64)(duckdb_appender appender, int64_t value);
	duckdb_state (*duckdb_append_hugeint)(duckdb_appender appender, duckdb_hugeint value);
	duckdb_state (*duckdb_append_uint8)(duckdb_appender appender, uint8_t value);
	duckdb_state (*duckdb_append_uint16)(duckdb_appender appender, uint16_t value);
	duckdb_state (*duckdb_append_uint32)(duckdb_appender appender, uint32_t value);
	duckdb_state (*duckdb_append_uint64)(duckdb_appender appender, uint64_t value);
	duckdb_state (*duckdb_append_uhugeint)(duckdb_appender appender, duckdb_uhugeint value);
	duckdb_state (*duckdb_append_float)(duckdb_appender appender, float value);
	duckdb_state (*duckdb_append_double)(duckdb_appender appender, double value);
	duckdb_state (*duckdb_append_date)(duckdb_appender appender, duckdb_date value);
	duckdb_state (*duckdb_append_time)(duckdb_appender appender, duckdb_time value);
	duckdb_state (*duckdb_append_timestamp)(duckdb_appender appender, duckdb_timestamp value);
	duckdb_state (*duckdb_append_interval)(duckdb_appender appender, duckdb_interval value);
	duckdb_state (*duckdb_append_varchar)(duckdb_appender appender, const char *val);
	duckdb_state (*duckdb_append_varchar_length)(duckdb_appender appender, const char *val, idx_t length);
	duckdb_state (*duckdb_append_blob)(duckdb_appender appender, const void *data, idx_t length);
	duckdb_state (*duckdb_append_null)(duckdb_appender appender);
	duckdb_state (*duckdb_append_data_chunk)(duckdb_appender appender, duckdb_data_chunk chunk);
	void (*duckdb_execute_tasks)(duckdb_database database, idx_t max_tasks);
	duckdb_task_state (*duckdb_create_task_state)(duckdb_database database);
	void (*duckdb_execute_tasks_state)(duckdb_task_state state);
	idx_t (*duckdb_execute_n_tasks_state)(duckdb_task_state state, idx_t max_tasks);
	void (*duckdb_finish_execution)(duckdb_task_state state);
	bool (*duckdb_task_state_is_finished)(duckdb_task_state state);
	void (*duckdb_destroy_task_state)(duckdb_task_state state);
	bool (*duckdb_execution_is_finished)(duckdb_connection con);
	duckdb_profiling_info (*duckdb_get_profiling_info)(duckdb_connection connection);
	duckdb_value (*duckdb_profiling_info_get_value)(duckdb_profiling_info info, const char *key);
	idx_t (*duckdb_profiling_info_get_child_count)(duckdb_profiling_info info);
	duckdb_profiling_info (*duckdb_profiling_info_get_child)(duckdb_profiling_info info, idx_t index);
	duckdb_value (*duckdb_profiling_info_get_metrics)(duckdb_profiling_info info);
	void (*duckdb_scalar_function_set_varargs)(duckdb_scalar_function scalar_function, duckdb_logical_type type);
	void (*duckdb_scalar_function_set_special_handling)(duckdb_scalar_function scalar_function);
	void (*duckdb_scalar_function_set_volatile)(duckdb_scalar_function scalar_function);
	void *(*duckdb_scalar_function_get_extra_info)(duckdb_function_info info);
	void (*duckdb_scalar_function_set_error)(duckdb_function_info info, const char *error);
	duckdb_state (*duckdb_table_description_create)(duckdb_connection connection, const char *schema, const char *table,
	                                                duckdb_table_description *out);
	void (*duckdb_table_description_destroy)(duckdb_table_description *table_description);
	const char *(*duckdb_table_description_error)(duckdb_table_description table_description);
	duckdb_error_type (*duckdb_result_error_type)(duckdb_result *result);
	uint32_t (*duckdb_string_t_length)(duckdb_string_t string);
	const char *(*duckdb_string_t_data)(duckdb_string_t *string);
	duckdb_value (*duckdb_create_bool)(bool input);
	duckdb_value (*duckdb_create_int8)(int8_t input);
	duckdb_value (*duckdb_create_uint8)(uint8_t input);
	duckdb_value (*duckdb_create_int16)(int16_t input);
	duckdb_value (*duckdb_create_uint16)(uint16_t input);
	duckdb_value (*duckdb_create_int32)(int32_t input);
	duckdb_value (*duckdb_create_uint32)(uint32_t input);
	duckdb_value (*duckdb_create_uint64)(uint64_t input);
	duckdb_value (*duckdb_create_hugeint)(duckdb_hugeint input);
	duckdb_value (*duckdb_create_uhugeint)(duckdb_uhugeint input);
	duckdb_value (*duckdb_create_float)(float input);
	duckdb_value (*duckdb_create_double)(double input);
	duckdb_value (*duckdb_create_date)(duckdb_date input);
	duckdb_value (*duckdb_create_time)(duckdb_time input);
	duckdb_value (*duckdb_create_time_tz_value)(duckdb_time_tz value);
	duckdb_value (*duckdb_create_timestamp)(duckdb_timestamp input);
	duckdb_value (*duckdb_create_interval)(duckdb_interval input);
	duckdb_value (*duckdb_create_blob)(const uint8_t *data, idx_t length);
	bool (*duckdb_get_bool)(duckdb_value val);
	int8_t (*duckdb_get_int8)(duckdb_value val);
	uint8_t (*duckdb_get_uint8)(duckdb_value val);
	int16_t (*duckdb_get_int16)(duckdb_value val);
	uint16_t (*duckdb_get_uint16)(duckdb_value val);
	int32_t (*duckdb_get_int32)(duckdb_value val);
	uint32_t (*duckdb_get_uint32)(duckdb_value val);
	uint64_t (*duckdb_get_uint64)(duckdb_value val);
	duckdb_hugeint (*duckdb_get_hugeint)(duckdb_value val);
	duckdb_uhugeint (*duckdb_get_uhugeint)(duckdb_value val);
	float (*duckdb_get_float)(duckdb_value val);
	double (*duckdb_get_double)(duckdb_value val);
	duckdb_date (*duckdb_get_date)(duckdb_value val);
	duckdb_time (*duckdb_get_time)(duckdb_value val);
	duckdb_time_tz (*duckdb_get_time_tz)(duckdb_value val);
	duckdb_timestamp (*duckdb_get_timestamp)(duckdb_value val);
	duckdb_interval (*duckdb_get_interval)(duckdb_value val);
	duckdb_logical_type (*duckdb_get_value_type)(duckdb_value val);
	duckdb_blob (*duckdb_get_blob)(duckdb_value val);
	duckdb_scalar_function_set (*duckdb_create_scalar_function_set)(const char *name);
	void (*duckdb_destroy_scalar_function_set)(duckdb_scalar_function_set *scalar_function_set);
	duckdb_state (*duckdb_add_scalar_function_to_set)(duckdb_scalar_function_set set, duckdb_scalar_function function);
	duckdb_state (*duckdb_register_scalar_function_set)(duckdb_connection con, duckdb_scalar_function_set set);
	duckdb_aggregate_function_set (*duckdb_create_aggregate_function_set)(const char *name);
	void (*duckdb_destroy_aggregate_function_set)(duckdb_aggregate_function_set *aggregate_function_set);
	duckdb_state (*duckdb_add_aggregate_function_to_set)(duckdb_aggregate_function_set set,
	                                                     duckdb_aggregate_function function);
	duckdb_state (*duckdb_register_aggregate_function_set)(duckdb_connection con, duckdb_aggregate_function_set set);
	idx_t (*duckdb_get_map_size)(duckdb_value value);
	duckdb_value (*duckdb_get_map_key)(duckdb_value value, idx_t index);
	duckdb_value (*duckdb_get_map_value)(duckdb_value value, idx_t index);
	duckdb_aggregate_function (*duckdb_create_aggregate_function)();
	void (*duckdb_destroy_aggregate_function)(duckdb_aggregate_function *aggregate_function);
	void (*duckdb_aggregate_function_set_name)(duckdb_aggregate_function aggregate_function, const char *name);
	void (*duckdb_aggregate_function_add_parameter)(duckdb_aggregate_function aggregate_function,
	                                                duckdb_logical_type type);
	void (*duckdb_aggregate_function_set_return_type)(duckdb_aggregate_function aggregate_function,
	                                                  duckdb_logical_type type);
	void (*duckdb_aggregate_function_set_functions)(duckdb_aggregate_function aggregate_function,
	                                                duckdb_aggregate_state_size state_size,
	                                                duckdb_aggregate_init_t state_init,
	                                                duckdb_aggregate_update_t update,
	                                                duckdb_aggregate_combine_t combine,
	                                                duckdb_aggregate_finalize_t finalize);
	void (*duckdb_aggregate_function_set_destructor)(duckdb_aggregate_function aggregate_function,
	                                                 duckdb_aggregate_destroy_t destroy);
	duckdb_state (*duckdb_register_aggregate_function)(duckdb_connection con,
	                                                   duckdb_aggregate_function aggregate_function);
	void (*duckdb_aggregate_function_set_special_handling)(duckdb_aggregate_function aggregate_function);
	void (*duckdb_aggregate_function_set_extra_info)(duckdb_aggregate_function aggregate_function, void *extra_info,
	                                                 duckdb_delete_callback_t destroy);
	void *(*duckdb_aggregate_function_get_extra_info)(duckdb_function_info info);
	void (*duckdb_aggregate_function_set_error)(duckdb_function_info info, const char *error);
	void (*duckdb_logical_type_set_alias)(duckdb_logical_type type, const char *alias);
	duckdb_state (*duckdb_register_logical_type)(duckdb_connection con, duckdb_logical_type type,
	                                             duckdb_create_type_info info);
	duckdb_cast_function (*duckdb_create_cast_function)();
	void (*duckdb_cast_function_set_source_type)(duckdb_cast_function cast_function, duckdb_logical_type source_type);
	void (*duckdb_cast_function_set_target_type)(duckdb_cast_function cast_function, duckdb_logical_type target_type);
	void (*duckdb_cast_function_set_implicit_cast_cost)(duckdb_cast_function cast_function, int64_t cost);
	void (*duckdb_cast_function_set_function)(duckdb_cast_function cast_function, duckdb_cast_function_t function);
	void (*duckdb_cast_function_set_extra_info)(duckdb_cast_function cast_function, void *extra_info,
	                                            duckdb_delete_callback_t destroy);
	void *(*duckdb_cast_function_get_extra_info)(duckdb_function_info info);
	duckdb_cast_mode (*duckdb_cast_function_get_cast_mode)(duckdb_function_info info);
	void (*duckdb_cast_function_set_error)(duckdb_function_info info, const char *error);
	void (*duckdb_cast_function_set_row_error)(duckdb_function_info info, const char *error, idx_t row,
	                                           duckdb_vector output);
	duckdb_state (*duckdb_register_cast_function)(duckdb_connection con, duckdb_cast_function cast_function);
	void (*duckdb_destroy_cast_function)(duckdb_cast_function *cast_function);
	idx_t (*duckdb_row_count)(duckdb_result *result);
	void *(*duckdb_column_data)(duckdb_result *result, idx_t col);
	bool *(*duckdb_nullmask_data)(duckdb_result *result, idx_t col);
	duckdb_data_chunk (*duckdb_result_get_chunk)(duckdb_result result, idx_t chunk_index);
	bool (*duckdb_result_is_streaming)(duckdb_result result);
	idx_t (*duckdb_result_chunk_count)(duckdb_result result);
	duckdb_result_type (*duckdb_result_return_type)(duckdb_result result);
	bool (*duckdb_value_boolean)(duckdb_result *result, idx_t col, idx_t row);
	int8_t (*duckdb_value_int8)(duckdb_result *result, idx_t col, idx_t row);
	int16_t (*duckdb_value_int16)(duckdb_result *result, idx_t col, idx_t row);
	int32_t (*duckdb_value_int32)(duckdb_result *result, idx_t col, idx_t row);
	int64_t (*duckdb_value_int64)(duckdb_result *result, idx_t col, idx_t row);
	duckdb_hugeint (*duckdb_value_hugeint)(duckdb_result *result, idx_t col, idx_t row);
	duckdb_uhugeint (*duckdb_value_uhugeint)(duckdb_result *result, idx_t col, idx_t row);
	duckdb_decimal (*duckdb_value_decimal)(duckdb_result *result, idx_t col, idx_t row);
	uint8_t (*duckdb_value_uint8)(duckdb_result *result, idx_t col, idx_t row);
	uint16_t (*duckdb_value_uint16)(duckdb_result *result, idx_t col, idx_t row);
	uint32_t (*duckdb_value_uint32)(duckdb_result *result, idx_t col, idx_t row);
	uint64_t (*duckdb_value_uint64)(duckdb_result *result, idx_t col, idx_t row);
	float (*duckdb_value_float)(duckdb_result *result, idx_t col, idx_t row);
	double (*duckdb_value_double)(duckdb_result *result, idx_t col, idx_t row);
	duckdb_date (*duckdb_value_date)(duckdb_result *result, idx_t col, idx_t row);
	duckdb_time (*duckdb_value_time)(duckdb_result *result, idx_t col, idx_t row);
	duckdb_timestamp (*duckdb_value_timestamp)(duckdb_result *result, idx_t col, idx_t row);
	duckdb_interval (*duckdb_value_interval)(duckdb_result *result, idx_t col, idx_t row);
	char *(*duckdb_value_varchar)(duckdb_result *result, idx_t col, idx_t row);
	duckdb_string (*duckdb_value_string)(duckdb_result *result, idx_t col, idx_t row);
	char *(*duckdb_value_varchar_internal)(duckdb_result *result, idx_t col, idx_t row);
	duckdb_string (*duckdb_value_string_internal)(duckdb_result *result, idx_t col, idx_t row);
	duckdb_blob (*duckdb_value_blob)(duckdb_result *result, idx_t col, idx_t row);
	bool (*duckdb_value_is_null)(duckdb_result *result, idx_t col, idx_t row);
	duckdb_state (*duckdb_execute_prepared_streaming)(duckdb_prepared_statement prepared_statement,
	                                                  duckdb_result *out_result);
	duckdb_state (*duckdb_pending_prepared_streaming)(duckdb_prepared_statement prepared_statement,
	                                                  duckdb_pending_result *out_result);
	duckdb_state (*duckdb_column_has_default)(duckdb_table_description table_description, idx_t index, bool *out);
	duckdb_state (*duckdb_query_arrow)(duckdb_connection connection, const char *query, duckdb_arrow *out_result);
	duckdb_state (*duckdb_query_arrow_schema)(duckdb_arrow result, duckdb_arrow_schema *out_schema);
	duckdb_state (*duckdb_prepared_arrow_schema)(duckdb_prepared_statement prepared, duckdb_arrow_schema *out_schema);
	void (*duckdb_result_arrow_array)(duckdb_result result, duckdb_data_chunk chunk, duckdb_arrow_array *out_array);
	duckdb_state (*duckdb_query_arrow_array)(duckdb_arrow result, duckdb_arrow_array *out_array);
	idx_t (*duckdb_arrow_column_count)(duckdb_arrow result);
	idx_t (*duckdb_arrow_row_count)(duckdb_arrow result);
	idx_t (*duckdb_arrow_rows_changed)(duckdb_arrow result);
	const char *(*duckdb_query_arrow_error)(duckdb_arrow result);
	void (*duckdb_destroy_arrow)(duckdb_arrow *result);
	void (*duckdb_destroy_arrow_stream)(duckdb_arrow_stream *stream_p);
	duckdb_state (*duckdb_execute_prepared_arrow)(duckdb_prepared_statement prepared_statement,
	                                              duckdb_arrow *out_result);
	duckdb_state (*duckdb_arrow_scan)(duckdb_connection connection, const char *table_name, duckdb_arrow_stream arrow);
	duckdb_state (*duckdb_arrow_array_scan)(duckdb_connection connection, const char *table_name,
	                                        duckdb_arrow_schema arrow_schema, duckdb_arrow_array arrow_array,
	                                        duckdb_arrow_stream *out_stream);
	duckdb_data_chunk (*duckdb_stream_fetch_chunk)(duckdb_result result);
} duckdb_ext_api_v0;

extern duckdb_ext_api_v0 *duckdb_ext_api;

static duckdb_state duckdb_open(const char *path, duckdb_database *out_database) {
	return duckdb_ext_api->duckdb_open(path, out_database);
}

static duckdb_state duckdb_open_ext(const char *path, duckdb_database *out_database, duckdb_config config,
                                    char **out_error) {
	return duckdb_ext_api->duckdb_open_ext(path, out_database, config, out_error);
}

static void duckdb_close(duckdb_database *database) {
	return duckdb_ext_api->duckdb_close(database);
}

static duckdb_state duckdb_connect(duckdb_database database, duckdb_connection *out_connection) {
	return duckdb_ext_api->duckdb_connect(database, out_connection);
}

static void duckdb_interrupt(duckdb_connection connection) {
	return duckdb_ext_api->duckdb_interrupt(connection);
}

static duckdb_query_progress_type duckdb_query_progress(duckdb_connection connection) {
	return duckdb_ext_api->duckdb_query_progress(connection);
}

static void duckdb_disconnect(duckdb_connection *connection) {
	return duckdb_ext_api->duckdb_disconnect(connection);
}

static const char *duckdb_library_version() {
	return duckdb_ext_api->duckdb_library_version();
}

static duckdb_state duckdb_create_config(duckdb_config *out_config) {
	return duckdb_ext_api->duckdb_create_config(out_config);
}

static size_t duckdb_config_count() {
	return duckdb_ext_api->duckdb_config_count();
}

static duckdb_state duckdb_get_config_flag(size_t index, const char **out_name, const char **out_description) {
	return duckdb_ext_api->duckdb_get_config_flag(index, out_name, out_description);
}

static duckdb_state duckdb_set_config(duckdb_config config, const char *name, const char *option) {
	return duckdb_ext_api->duckdb_set_config(config, name, option);
}

static void duckdb_destroy_config(duckdb_config *config) {
	return duckdb_ext_api->duckdb_destroy_config(config);
}

static duckdb_state duckdb_query(duckdb_connection connection, const char *query, duckdb_result *out_result) {
	return duckdb_ext_api->duckdb_query(connection, query, out_result);
}

static void duckdb_destroy_result(duckdb_result *result) {
	return duckdb_ext_api->duckdb_destroy_result(result);
}

static const char *duckdb_column_name(duckdb_result *result, idx_t col) {
	return duckdb_ext_api->duckdb_column_name(result, col);
}

static duckdb_type duckdb_column_type(duckdb_result *result, idx_t col) {
	return duckdb_ext_api->duckdb_column_type(result, col);
}

static duckdb_statement_type duckdb_result_statement_type(duckdb_result result) {
	return duckdb_ext_api->duckdb_result_statement_type(result);
}

static duckdb_logical_type duckdb_column_logical_type(duckdb_result *result, idx_t col) {
	return duckdb_ext_api->duckdb_column_logical_type(result, col);
}

static idx_t duckdb_column_count(duckdb_result *result) {
	return duckdb_ext_api->duckdb_column_count(result);
}

static idx_t duckdb_rows_changed(duckdb_result *result) {
	return duckdb_ext_api->duckdb_rows_changed(result);
}

static const char *duckdb_result_error(duckdb_result *result) {
	return duckdb_ext_api->duckdb_result_error(result);
}

static void *duckdb_malloc(size_t size) {
	return duckdb_ext_api->duckdb_malloc(size);
}

static void duckdb_free(void *ptr) {
	return duckdb_ext_api->duckdb_free(ptr);
}

static idx_t duckdb_vector_size() {
	return duckdb_ext_api->duckdb_vector_size();
}

static bool duckdb_string_is_inlined(duckdb_string_t string) {
	return duckdb_ext_api->duckdb_string_is_inlined(string);
}

static duckdb_date_struct duckdb_from_date(duckdb_date date) {
	return duckdb_ext_api->duckdb_from_date(date);
}

static duckdb_date duckdb_to_date(duckdb_date_struct date) {
	return duckdb_ext_api->duckdb_to_date(date);
}

static bool duckdb_is_finite_date(duckdb_date date) {
	return duckdb_ext_api->duckdb_is_finite_date(date);
}

static duckdb_time_struct duckdb_from_time(duckdb_time time) {
	return duckdb_ext_api->duckdb_from_time(time);
}

static duckdb_time_tz duckdb_create_time_tz(int64_t micros, int32_t offset) {
	return duckdb_ext_api->duckdb_create_time_tz(micros, offset);
}

static duckdb_time_tz_struct duckdb_from_time_tz(duckdb_time_tz micros) {
	return duckdb_ext_api->duckdb_from_time_tz(micros);
}

static duckdb_time duckdb_to_time(duckdb_time_struct time) {
	return duckdb_ext_api->duckdb_to_time(time);
}

static duckdb_timestamp_struct duckdb_from_timestamp(duckdb_timestamp ts) {
	return duckdb_ext_api->duckdb_from_timestamp(ts);
}

static duckdb_timestamp duckdb_to_timestamp(duckdb_timestamp_struct ts) {
	return duckdb_ext_api->duckdb_to_timestamp(ts);
}

static bool duckdb_is_finite_timestamp(duckdb_timestamp ts) {
	return duckdb_ext_api->duckdb_is_finite_timestamp(ts);
}

static double duckdb_hugeint_to_double(duckdb_hugeint val) {
	return duckdb_ext_api->duckdb_hugeint_to_double(val);
}

static duckdb_hugeint duckdb_double_to_hugeint(double val) {
	return duckdb_ext_api->duckdb_double_to_hugeint(val);
}

static double duckdb_uhugeint_to_double(duckdb_uhugeint val) {
	return duckdb_ext_api->duckdb_uhugeint_to_double(val);
}

static duckdb_uhugeint duckdb_double_to_uhugeint(double val) {
	return duckdb_ext_api->duckdb_double_to_uhugeint(val);
}

static duckdb_decimal duckdb_double_to_decimal(double val, uint8_t width, uint8_t scale) {
	return duckdb_ext_api->duckdb_double_to_decimal(val, width, scale);
}

static double duckdb_decimal_to_double(duckdb_decimal val) {
	return duckdb_ext_api->duckdb_decimal_to_double(val);
}

static duckdb_state duckdb_prepare(duckdb_connection connection, const char *query,
                                   duckdb_prepared_statement *out_prepared_statement) {
	return duckdb_ext_api->duckdb_prepare(connection, query, out_prepared_statement);
}

static void duckdb_destroy_prepare(duckdb_prepared_statement *prepared_statement) {
	return duckdb_ext_api->duckdb_destroy_prepare(prepared_statement);
}

static const char *duckdb_prepare_error(duckdb_prepared_statement prepared_statement) {
	return duckdb_ext_api->duckdb_prepare_error(prepared_statement);
}

static idx_t duckdb_nparams(duckdb_prepared_statement prepared_statement) {
	return duckdb_ext_api->duckdb_nparams(prepared_statement);
}

static const char *duckdb_parameter_name(duckdb_prepared_statement prepared_statement, idx_t index) {
	return duckdb_ext_api->duckdb_parameter_name(prepared_statement, index);
}

static duckdb_type duckdb_param_type(duckdb_prepared_statement prepared_statement, idx_t param_idx) {
	return duckdb_ext_api->duckdb_param_type(prepared_statement, param_idx);
}

static duckdb_state duckdb_clear_bindings(duckdb_prepared_statement prepared_statement) {
	return duckdb_ext_api->duckdb_clear_bindings(prepared_statement);
}

static duckdb_statement_type duckdb_prepared_statement_type(duckdb_prepared_statement statement) {
	return duckdb_ext_api->duckdb_prepared_statement_type(statement);
}

static duckdb_state duckdb_bind_value(duckdb_prepared_statement prepared_statement, idx_t param_idx, duckdb_value val) {
	return duckdb_ext_api->duckdb_bind_value(prepared_statement, param_idx, val);
}

static duckdb_state duckdb_bind_parameter_index(duckdb_prepared_statement prepared_statement, idx_t *param_idx_out,
                                                const char *name) {
	return duckdb_ext_api->duckdb_bind_parameter_index(prepared_statement, param_idx_out, name);
}

static duckdb_state duckdb_bind_boolean(duckdb_prepared_statement prepared_statement, idx_t param_idx, bool val) {
	return duckdb_ext_api->duckdb_bind_boolean(prepared_statement, param_idx, val);
}

static duckdb_state duckdb_bind_int8(duckdb_prepared_statement prepared_statement, idx_t param_idx, int8_t val) {
	return duckdb_ext_api->duckdb_bind_int8(prepared_statement, param_idx, val);
}

static duckdb_state duckdb_bind_int16(duckdb_prepared_statement prepared_statement, idx_t param_idx, int16_t val) {
	return duckdb_ext_api->duckdb_bind_int16(prepared_statement, param_idx, val);
}

static duckdb_state duckdb_bind_int32(duckdb_prepared_statement prepared_statement, idx_t param_idx, int32_t val) {
	return duckdb_ext_api->duckdb_bind_int32(prepared_statement, param_idx, val);
}

static duckdb_state duckdb_bind_int64(duckdb_prepared_statement prepared_statement, idx_t param_idx, int64_t val) {
	return duckdb_ext_api->duckdb_bind_int64(prepared_statement, param_idx, val);
}

static duckdb_state duckdb_bind_hugeint(duckdb_prepared_statement prepared_statement, idx_t param_idx,
                                        duckdb_hugeint val) {
	return duckdb_ext_api->duckdb_bind_hugeint(prepared_statement, param_idx, val);
}

static duckdb_state duckdb_bind_uhugeint(duckdb_prepared_statement prepared_statement, idx_t param_idx,
                                         duckdb_uhugeint val) {
	return duckdb_ext_api->duckdb_bind_uhugeint(prepared_statement, param_idx, val);
}

static duckdb_state duckdb_bind_decimal(duckdb_prepared_statement prepared_statement, idx_t param_idx,
                                        duckdb_decimal val) {
	return duckdb_ext_api->duckdb_bind_decimal(prepared_statement, param_idx, val);
}

static duckdb_state duckdb_bind_uint8(duckdb_prepared_statement prepared_statement, idx_t param_idx, uint8_t val) {
	return duckdb_ext_api->duckdb_bind_uint8(prepared_statement, param_idx, val);
}

static duckdb_state duckdb_bind_uint16(duckdb_prepared_statement prepared_statement, idx_t param_idx, uint16_t val) {
	return duckdb_ext_api->duckdb_bind_uint16(prepared_statement, param_idx, val);
}

static duckdb_state duckdb_bind_uint32(duckdb_prepared_statement prepared_statement, idx_t param_idx, uint32_t val) {
	return duckdb_ext_api->duckdb_bind_uint32(prepared_statement, param_idx, val);
}

static duckdb_state duckdb_bind_uint64(duckdb_prepared_statement prepared_statement, idx_t param_idx, uint64_t val) {
	return duckdb_ext_api->duckdb_bind_uint64(prepared_statement, param_idx, val);
}

static duckdb_state duckdb_bind_float(duckdb_prepared_statement prepared_statement, idx_t param_idx, float val) {
	return duckdb_ext_api->duckdb_bind_float(prepared_statement, param_idx, val);
}

static duckdb_state duckdb_bind_double(duckdb_prepared_statement prepared_statement, idx_t param_idx, double val) {
	return duckdb_ext_api->duckdb_bind_double(prepared_statement, param_idx, val);
}

static duckdb_state duckdb_bind_date(duckdb_prepared_statement prepared_statement, idx_t param_idx, duckdb_date val) {
	return duckdb_ext_api->duckdb_bind_date(prepared_statement, param_idx, val);
}

static duckdb_state duckdb_bind_time(duckdb_prepared_statement prepared_statement, idx_t param_idx, duckdb_time val) {
	return duckdb_ext_api->duckdb_bind_time(prepared_statement, param_idx, val);
}

static duckdb_state duckdb_bind_timestamp(duckdb_prepared_statement prepared_statement, idx_t param_idx,
                                          duckdb_timestamp val) {
	return duckdb_ext_api->duckdb_bind_timestamp(prepared_statement, param_idx, val);
}

static duckdb_state duckdb_bind_timestamp_tz(duckdb_prepared_statement prepared_statement, idx_t param_idx,
                                             duckdb_timestamp val) {
	return duckdb_ext_api->duckdb_bind_timestamp_tz(prepared_statement, param_idx, val);
}

static duckdb_state duckdb_bind_interval(duckdb_prepared_statement prepared_statement, idx_t param_idx,
                                         duckdb_interval val) {
	return duckdb_ext_api->duckdb_bind_interval(prepared_statement, param_idx, val);
}

static duckdb_state duckdb_bind_varchar(duckdb_prepared_statement prepared_statement, idx_t param_idx,
                                        const char *val) {
	return duckdb_ext_api->duckdb_bind_varchar(prepared_statement, param_idx, val);
}

static duckdb_state duckdb_bind_varchar_length(duckdb_prepared_statement prepared_statement, idx_t param_idx,
                                               const char *val, idx_t length) {
	return duckdb_ext_api->duckdb_bind_varchar_length(prepared_statement, param_idx, val, length);
}

static duckdb_state duckdb_bind_blob(duckdb_prepared_statement prepared_statement, idx_t param_idx, const void *data,
                                     idx_t length) {
	return duckdb_ext_api->duckdb_bind_blob(prepared_statement, param_idx, data, length);
}

static duckdb_state duckdb_bind_null(duckdb_prepared_statement prepared_statement, idx_t param_idx) {
	return duckdb_ext_api->duckdb_bind_null(prepared_statement, param_idx);
}

static duckdb_state duckdb_execute_prepared(duckdb_prepared_statement prepared_statement, duckdb_result *out_result) {
	return duckdb_ext_api->duckdb_execute_prepared(prepared_statement, out_result);
}

static idx_t duckdb_extract_statements(duckdb_connection connection, const char *query,
                                       duckdb_extracted_statements *out_extracted_statements) {
	return duckdb_ext_api->duckdb_extract_statements(connection, query, out_extracted_statements);
}

static duckdb_state duckdb_prepare_extracted_statement(duckdb_connection connection,
                                                       duckdb_extracted_statements extracted_statements, idx_t index,
                                                       duckdb_prepared_statement *out_prepared_statement) {
	return duckdb_ext_api->duckdb_prepare_extracted_statement(connection, extracted_statements, index,
	                                                          out_prepared_statement);
}

static const char *duckdb_extract_statements_error(duckdb_extracted_statements extracted_statements) {
	return duckdb_ext_api->duckdb_extract_statements_error(extracted_statements);
}

static void duckdb_destroy_extracted(duckdb_extracted_statements *extracted_statements) {
	return duckdb_ext_api->duckdb_destroy_extracted(extracted_statements);
}

static duckdb_state duckdb_pending_prepared(duckdb_prepared_statement prepared_statement,
                                            duckdb_pending_result *out_result) {
	return duckdb_ext_api->duckdb_pending_prepared(prepared_statement, out_result);
}

static void duckdb_destroy_pending(duckdb_pending_result *pending_result) {
	return duckdb_ext_api->duckdb_destroy_pending(pending_result);
}

static const char *duckdb_pending_error(duckdb_pending_result pending_result) {
	return duckdb_ext_api->duckdb_pending_error(pending_result);
}

static duckdb_pending_state duckdb_pending_execute_task(duckdb_pending_result pending_result) {
	return duckdb_ext_api->duckdb_pending_execute_task(pending_result);
}

static duckdb_pending_state duckdb_pending_execute_check_state(duckdb_pending_result pending_result) {
	return duckdb_ext_api->duckdb_pending_execute_check_state(pending_result);
}

static duckdb_state duckdb_execute_pending(duckdb_pending_result pending_result, duckdb_result *out_result) {
	return duckdb_ext_api->duckdb_execute_pending(pending_result, out_result);
}

static bool duckdb_pending_execution_is_finished(duckdb_pending_state pending_state) {
	return duckdb_ext_api->duckdb_pending_execution_is_finished(pending_state);
}

static void duckdb_destroy_value(duckdb_value *value) {
	return duckdb_ext_api->duckdb_destroy_value(value);
}

static duckdb_value duckdb_create_varchar(const char *text) {
	return duckdb_ext_api->duckdb_create_varchar(text);
}

static duckdb_value duckdb_create_varchar_length(const char *text, idx_t length) {
	return duckdb_ext_api->duckdb_create_varchar_length(text, length);
}

static duckdb_value duckdb_create_int64(int64_t val) {
	return duckdb_ext_api->duckdb_create_int64(val);
}

static duckdb_value duckdb_create_struct_value(duckdb_logical_type type, duckdb_value *values) {
	return duckdb_ext_api->duckdb_create_struct_value(type, values);
}

static duckdb_value duckdb_create_list_value(duckdb_logical_type type, duckdb_value *values, idx_t value_count) {
	return duckdb_ext_api->duckdb_create_list_value(type, values, value_count);
}

static duckdb_value duckdb_create_array_value(duckdb_logical_type type, duckdb_value *values, idx_t value_count) {
	return duckdb_ext_api->duckdb_create_array_value(type, values, value_count);
}

static char *duckdb_get_varchar(duckdb_value value) {
	return duckdb_ext_api->duckdb_get_varchar(value);
}

static int64_t duckdb_get_int64(duckdb_value val) {
	return duckdb_ext_api->duckdb_get_int64(val);
}

static duckdb_logical_type duckdb_create_logical_type(duckdb_type type) {
	return duckdb_ext_api->duckdb_create_logical_type(type);
}

static char *duckdb_logical_type_get_alias(duckdb_logical_type type) {
	return duckdb_ext_api->duckdb_logical_type_get_alias(type);
}

static duckdb_logical_type duckdb_create_list_type(duckdb_logical_type type) {
	return duckdb_ext_api->duckdb_create_list_type(type);
}

static duckdb_logical_type duckdb_create_array_type(duckdb_logical_type type, idx_t array_size) {
	return duckdb_ext_api->duckdb_create_array_type(type, array_size);
}

static duckdb_logical_type duckdb_create_map_type(duckdb_logical_type key_type, duckdb_logical_type value_type) {
	return duckdb_ext_api->duckdb_create_map_type(key_type, value_type);
}

static duckdb_logical_type duckdb_create_union_type(duckdb_logical_type *member_types, const char **member_names,
                                                    idx_t member_count) {
	return duckdb_ext_api->duckdb_create_union_type(member_types, member_names, member_count);
}

static duckdb_logical_type duckdb_create_struct_type(duckdb_logical_type *member_types, const char **member_names,
                                                     idx_t member_count) {
	return duckdb_ext_api->duckdb_create_struct_type(member_types, member_names, member_count);
}

static duckdb_logical_type duckdb_create_enum_type(const char **member_names, idx_t member_count) {
	return duckdb_ext_api->duckdb_create_enum_type(member_names, member_count);
}

static duckdb_logical_type duckdb_create_decimal_type(uint8_t width, uint8_t scale) {
	return duckdb_ext_api->duckdb_create_decimal_type(width, scale);
}

static duckdb_type duckdb_get_type_id(duckdb_logical_type type) {
	return duckdb_ext_api->duckdb_get_type_id(type);
}

static uint8_t duckdb_decimal_width(duckdb_logical_type type) {
	return duckdb_ext_api->duckdb_decimal_width(type);
}

static uint8_t duckdb_decimal_scale(duckdb_logical_type type) {
	return duckdb_ext_api->duckdb_decimal_scale(type);
}

static duckdb_type duckdb_decimal_internal_type(duckdb_logical_type type) {
	return duckdb_ext_api->duckdb_decimal_internal_type(type);
}

static duckdb_type duckdb_enum_internal_type(duckdb_logical_type type) {
	return duckdb_ext_api->duckdb_enum_internal_type(type);
}

static uint32_t duckdb_enum_dictionary_size(duckdb_logical_type type) {
	return duckdb_ext_api->duckdb_enum_dictionary_size(type);
}

static char *duckdb_enum_dictionary_value(duckdb_logical_type type, idx_t index) {
	return duckdb_ext_api->duckdb_enum_dictionary_value(type, index);
}

static duckdb_logical_type duckdb_list_type_child_type(duckdb_logical_type type) {
	return duckdb_ext_api->duckdb_list_type_child_type(type);
}

static duckdb_logical_type duckdb_array_type_child_type(duckdb_logical_type type) {
	return duckdb_ext_api->duckdb_array_type_child_type(type);
}

static idx_t duckdb_array_type_array_size(duckdb_logical_type type) {
	return duckdb_ext_api->duckdb_array_type_array_size(type);
}

static duckdb_logical_type duckdb_map_type_key_type(duckdb_logical_type type) {
	return duckdb_ext_api->duckdb_map_type_key_type(type);
}

static duckdb_logical_type duckdb_map_type_value_type(duckdb_logical_type type) {
	return duckdb_ext_api->duckdb_map_type_value_type(type);
}

static idx_t duckdb_struct_type_child_count(duckdb_logical_type type) {
	return duckdb_ext_api->duckdb_struct_type_child_count(type);
}

static char *duckdb_struct_type_child_name(duckdb_logical_type type, idx_t index) {
	return duckdb_ext_api->duckdb_struct_type_child_name(type, index);
}

static duckdb_logical_type duckdb_struct_type_child_type(duckdb_logical_type type, idx_t index) {
	return duckdb_ext_api->duckdb_struct_type_child_type(type, index);
}

static idx_t duckdb_union_type_member_count(duckdb_logical_type type) {
	return duckdb_ext_api->duckdb_union_type_member_count(type);
}

static char *duckdb_union_type_member_name(duckdb_logical_type type, idx_t index) {
	return duckdb_ext_api->duckdb_union_type_member_name(type, index);
}

static duckdb_logical_type duckdb_union_type_member_type(duckdb_logical_type type, idx_t index) {
	return duckdb_ext_api->duckdb_union_type_member_type(type, index);
}

static void duckdb_destroy_logical_type(duckdb_logical_type *type) {
	return duckdb_ext_api->duckdb_destroy_logical_type(type);
}

static duckdb_data_chunk duckdb_fetch_chunk(duckdb_result result) {
	return duckdb_ext_api->duckdb_fetch_chunk(result);
}

static duckdb_data_chunk duckdb_create_data_chunk(duckdb_logical_type *types, idx_t column_count) {
	return duckdb_ext_api->duckdb_create_data_chunk(types, column_count);
}

static void duckdb_destroy_data_chunk(duckdb_data_chunk *chunk) {
	return duckdb_ext_api->duckdb_destroy_data_chunk(chunk);
}

static void duckdb_data_chunk_reset(duckdb_data_chunk chunk) {
	return duckdb_ext_api->duckdb_data_chunk_reset(chunk);
}

static idx_t duckdb_data_chunk_get_column_count(duckdb_data_chunk chunk) {
	return duckdb_ext_api->duckdb_data_chunk_get_column_count(chunk);
}

static duckdb_vector duckdb_data_chunk_get_vector(duckdb_data_chunk chunk, idx_t col_idx) {
	return duckdb_ext_api->duckdb_data_chunk_get_vector(chunk, col_idx);
}

static idx_t duckdb_data_chunk_get_size(duckdb_data_chunk chunk) {
	return duckdb_ext_api->duckdb_data_chunk_get_size(chunk);
}

static void duckdb_data_chunk_set_size(duckdb_data_chunk chunk, idx_t size) {
	return duckdb_ext_api->duckdb_data_chunk_set_size(chunk, size);
}

static duckdb_logical_type duckdb_vector_get_column_type(duckdb_vector vector) {
	return duckdb_ext_api->duckdb_vector_get_column_type(vector);
}

static void *duckdb_vector_get_data(duckdb_vector vector) {
	return duckdb_ext_api->duckdb_vector_get_data(vector);
}

static uint64_t *duckdb_vector_get_validity(duckdb_vector vector) {
	return duckdb_ext_api->duckdb_vector_get_validity(vector);
}

static void duckdb_vector_ensure_validity_writable(duckdb_vector vector) {
	return duckdb_ext_api->duckdb_vector_ensure_validity_writable(vector);
}

static void duckdb_vector_assign_string_element(duckdb_vector vector, idx_t index, const char *str) {
	return duckdb_ext_api->duckdb_vector_assign_string_element(vector, index, str);
}

static void duckdb_vector_assign_string_element_len(duckdb_vector vector, idx_t index, const char *str, idx_t str_len) {
	return duckdb_ext_api->duckdb_vector_assign_string_element_len(vector, index, str, str_len);
}

static duckdb_vector duckdb_list_vector_get_child(duckdb_vector vector) {
	return duckdb_ext_api->duckdb_list_vector_get_child(vector);
}

static idx_t duckdb_list_vector_get_size(duckdb_vector vector) {
	return duckdb_ext_api->duckdb_list_vector_get_size(vector);
}

static duckdb_state duckdb_list_vector_set_size(duckdb_vector vector, idx_t size) {
	return duckdb_ext_api->duckdb_list_vector_set_size(vector, size);
}

static duckdb_state duckdb_list_vector_reserve(duckdb_vector vector, idx_t required_capacity) {
	return duckdb_ext_api->duckdb_list_vector_reserve(vector, required_capacity);
}

static duckdb_vector duckdb_struct_vector_get_child(duckdb_vector vector, idx_t index) {
	return duckdb_ext_api->duckdb_struct_vector_get_child(vector, index);
}

static duckdb_vector duckdb_array_vector_get_child(duckdb_vector vector) {
	return duckdb_ext_api->duckdb_array_vector_get_child(vector);
}

static bool duckdb_validity_row_is_valid(uint64_t *validity, idx_t row) {
	return duckdb_ext_api->duckdb_validity_row_is_valid(validity, row);
}

static void duckdb_validity_set_row_validity(uint64_t *validity, idx_t row, bool valid) {
	return duckdb_ext_api->duckdb_validity_set_row_validity(validity, row, valid);
}

static void duckdb_validity_set_row_invalid(uint64_t *validity, idx_t row) {
	return duckdb_ext_api->duckdb_validity_set_row_invalid(validity, row);
}

static void duckdb_validity_set_row_valid(uint64_t *validity, idx_t row) {
	return duckdb_ext_api->duckdb_validity_set_row_valid(validity, row);
}

static duckdb_scalar_function duckdb_create_scalar_function() {
	return duckdb_ext_api->duckdb_create_scalar_function();
}

static void duckdb_destroy_scalar_function(duckdb_scalar_function *scalar_function) {
	return duckdb_ext_api->duckdb_destroy_scalar_function(scalar_function);
}

static void duckdb_scalar_function_set_name(duckdb_scalar_function scalar_function, const char *name) {
	return duckdb_ext_api->duckdb_scalar_function_set_name(scalar_function, name);
}

static void duckdb_scalar_function_add_parameter(duckdb_scalar_function scalar_function, duckdb_logical_type type) {
	return duckdb_ext_api->duckdb_scalar_function_add_parameter(scalar_function, type);
}

static void duckdb_scalar_function_set_return_type(duckdb_scalar_function scalar_function, duckdb_logical_type type) {
	return duckdb_ext_api->duckdb_scalar_function_set_return_type(scalar_function, type);
}

static void duckdb_scalar_function_set_extra_info(duckdb_scalar_function scalar_function, void *extra_info,
                                                  duckdb_delete_callback_t destroy) {
	return duckdb_ext_api->duckdb_scalar_function_set_extra_info(scalar_function, extra_info, destroy);
}

static void duckdb_scalar_function_set_function(duckdb_scalar_function scalar_function,
                                                duckdb_scalar_function_t function) {
	return duckdb_ext_api->duckdb_scalar_function_set_function(scalar_function, function);
}

static duckdb_state duckdb_register_scalar_function(duckdb_connection con, duckdb_scalar_function scalar_function) {
	return duckdb_ext_api->duckdb_register_scalar_function(con, scalar_function);
}

static duckdb_table_function duckdb_create_table_function() {
	return duckdb_ext_api->duckdb_create_table_function();
}

static void duckdb_destroy_table_function(duckdb_table_function *table_function) {
	return duckdb_ext_api->duckdb_destroy_table_function(table_function);
}

static void duckdb_table_function_set_name(duckdb_table_function table_function, const char *name) {
	return duckdb_ext_api->duckdb_table_function_set_name(table_function, name);
}

static void duckdb_table_function_add_parameter(duckdb_table_function table_function, duckdb_logical_type type) {
	return duckdb_ext_api->duckdb_table_function_add_parameter(table_function, type);
}

static void duckdb_table_function_add_named_parameter(duckdb_table_function table_function, const char *name,
                                                      duckdb_logical_type type) {
	return duckdb_ext_api->duckdb_table_function_add_named_parameter(table_function, name, type);
}

static void duckdb_table_function_set_extra_info(duckdb_table_function table_function, void *extra_info,
                                                 duckdb_delete_callback_t destroy) {
	return duckdb_ext_api->duckdb_table_function_set_extra_info(table_function, extra_info, destroy);
}

static void duckdb_table_function_set_bind(duckdb_table_function table_function, duckdb_table_function_bind_t bind) {
	return duckdb_ext_api->duckdb_table_function_set_bind(table_function, bind);
}

static void duckdb_table_function_set_init(duckdb_table_function table_function, duckdb_table_function_init_t init) {
	return duckdb_ext_api->duckdb_table_function_set_init(table_function, init);
}

static void duckdb_table_function_set_local_init(duckdb_table_function table_function,
                                                 duckdb_table_function_init_t init) {
	return duckdb_ext_api->duckdb_table_function_set_local_init(table_function, init);
}

static void duckdb_table_function_set_function(duckdb_table_function table_function, duckdb_table_function_t function) {
	return duckdb_ext_api->duckdb_table_function_set_function(table_function, function);
}

static void duckdb_table_function_supports_projection_pushdown(duckdb_table_function table_function, bool pushdown) {
	return duckdb_ext_api->duckdb_table_function_supports_projection_pushdown(table_function, pushdown);
}

static duckdb_state duckdb_register_table_function(duckdb_connection con, duckdb_table_function function) {
	return duckdb_ext_api->duckdb_register_table_function(con, function);
}

static void *duckdb_bind_get_extra_info(duckdb_bind_info info) {
	return duckdb_ext_api->duckdb_bind_get_extra_info(info);
}

static void duckdb_bind_add_result_column(duckdb_bind_info info, const char *name, duckdb_logical_type type) {
	return duckdb_ext_api->duckdb_bind_add_result_column(info, name, type);
}

static idx_t duckdb_bind_get_parameter_count(duckdb_bind_info info) {
	return duckdb_ext_api->duckdb_bind_get_parameter_count(info);
}

static duckdb_value duckdb_bind_get_parameter(duckdb_bind_info info, idx_t index) {
	return duckdb_ext_api->duckdb_bind_get_parameter(info, index);
}

static duckdb_value duckdb_bind_get_named_parameter(duckdb_bind_info info, const char *name) {
	return duckdb_ext_api->duckdb_bind_get_named_parameter(info, name);
}

static void duckdb_bind_set_bind_data(duckdb_bind_info info, void *bind_data, duckdb_delete_callback_t destroy) {
	return duckdb_ext_api->duckdb_bind_set_bind_data(info, bind_data, destroy);
}

static void duckdb_bind_set_cardinality(duckdb_bind_info info, idx_t cardinality, bool is_exact) {
	return duckdb_ext_api->duckdb_bind_set_cardinality(info, cardinality, is_exact);
}

static void duckdb_bind_set_error(duckdb_bind_info info, const char *error) {
	return duckdb_ext_api->duckdb_bind_set_error(info, error);
}

static void *duckdb_init_get_extra_info(duckdb_init_info info) {
	return duckdb_ext_api->duckdb_init_get_extra_info(info);
}

static void *duckdb_init_get_bind_data(duckdb_init_info info) {
	return duckdb_ext_api->duckdb_init_get_bind_data(info);
}

static void duckdb_init_set_init_data(duckdb_init_info info, void *init_data, duckdb_delete_callback_t destroy) {
	return duckdb_ext_api->duckdb_init_set_init_data(info, init_data, destroy);
}

static idx_t duckdb_init_get_column_count(duckdb_init_info info) {
	return duckdb_ext_api->duckdb_init_get_column_count(info);
}

static idx_t duckdb_init_get_column_index(duckdb_init_info info, idx_t column_index) {
	return duckdb_ext_api->duckdb_init_get_column_index(info, column_index);
}

static void duckdb_init_set_max_threads(duckdb_init_info info, idx_t max_threads) {
	return duckdb_ext_api->duckdb_init_set_max_threads(info, max_threads);
}

static void duckdb_init_set_error(duckdb_init_info info, const char *error) {
	return duckdb_ext_api->duckdb_init_set_error(info, error);
}

static void *duckdb_function_get_extra_info(duckdb_function_info info) {
	return duckdb_ext_api->duckdb_function_get_extra_info(info);
}

static void *duckdb_function_get_bind_data(duckdb_function_info info) {
	return duckdb_ext_api->duckdb_function_get_bind_data(info);
}

static void *duckdb_function_get_init_data(duckdb_function_info info) {
	return duckdb_ext_api->duckdb_function_get_init_data(info);
}

static void *duckdb_function_get_local_init_data(duckdb_function_info info) {
	return duckdb_ext_api->duckdb_function_get_local_init_data(info);
}

static void duckdb_function_set_error(duckdb_function_info info, const char *error) {
	return duckdb_ext_api->duckdb_function_set_error(info, error);
}

static void duckdb_add_replacement_scan(duckdb_database db, duckdb_replacement_callback_t replacement, void *extra_data,
                                        duckdb_delete_callback_t delete_callback) {
	return duckdb_ext_api->duckdb_add_replacement_scan(db, replacement, extra_data, delete_callback);
}

static void duckdb_replacement_scan_set_function_name(duckdb_replacement_scan_info info, const char *function_name) {
	return duckdb_ext_api->duckdb_replacement_scan_set_function_name(info, function_name);
}

static void duckdb_replacement_scan_add_parameter(duckdb_replacement_scan_info info, duckdb_value parameter) {
	return duckdb_ext_api->duckdb_replacement_scan_add_parameter(info, parameter);
}

static void duckdb_replacement_scan_set_error(duckdb_replacement_scan_info info, const char *error) {
	return duckdb_ext_api->duckdb_replacement_scan_set_error(info, error);
}

static duckdb_state duckdb_appender_create(duckdb_connection connection, const char *schema, const char *table,
                                           duckdb_appender *out_appender) {
	return duckdb_ext_api->duckdb_appender_create(connection, schema, table, out_appender);
}

static idx_t duckdb_appender_column_count(duckdb_appender appender) {
	return duckdb_ext_api->duckdb_appender_column_count(appender);
}

static duckdb_logical_type duckdb_appender_column_type(duckdb_appender appender, idx_t col_idx) {
	return duckdb_ext_api->duckdb_appender_column_type(appender, col_idx);
}

static const char *duckdb_appender_error(duckdb_appender appender) {
	return duckdb_ext_api->duckdb_appender_error(appender);
}

static duckdb_state duckdb_appender_flush(duckdb_appender appender) {
	return duckdb_ext_api->duckdb_appender_flush(appender);
}

static duckdb_state duckdb_appender_close(duckdb_appender appender) {
	return duckdb_ext_api->duckdb_appender_close(appender);
}

static duckdb_state duckdb_appender_destroy(duckdb_appender *appender) {
	return duckdb_ext_api->duckdb_appender_destroy(appender);
}

static duckdb_state duckdb_appender_begin_row(duckdb_appender appender) {
	return duckdb_ext_api->duckdb_appender_begin_row(appender);
}

static duckdb_state duckdb_appender_end_row(duckdb_appender appender) {
	return duckdb_ext_api->duckdb_appender_end_row(appender);
}

static duckdb_state duckdb_append_default(duckdb_appender appender) {
	return duckdb_ext_api->duckdb_append_default(appender);
}

static duckdb_state duckdb_append_bool(duckdb_appender appender, bool value) {
	return duckdb_ext_api->duckdb_append_bool(appender, value);
}

static duckdb_state duckdb_append_int8(duckdb_appender appender, int8_t value) {
	return duckdb_ext_api->duckdb_append_int8(appender, value);
}

static duckdb_state duckdb_append_int16(duckdb_appender appender, int16_t value) {
	return duckdb_ext_api->duckdb_append_int16(appender, value);
}

static duckdb_state duckdb_append_int32(duckdb_appender appender, int32_t value) {
	return duckdb_ext_api->duckdb_append_int32(appender, value);
}

static duckdb_state duckdb_append_int64(duckdb_appender appender, int64_t value) {
	return duckdb_ext_api->duckdb_append_int64(appender, value);
}

static duckdb_state duckdb_append_hugeint(duckdb_appender appender, duckdb_hugeint value) {
	return duckdb_ext_api->duckdb_append_hugeint(appender, value);
}

static duckdb_state duckdb_append_uint8(duckdb_appender appender, uint8_t value) {
	return duckdb_ext_api->duckdb_append_uint8(appender, value);
}

static duckdb_state duckdb_append_uint16(duckdb_appender appender, uint16_t value) {
	return duckdb_ext_api->duckdb_append_uint16(appender, value);
}

static duckdb_state duckdb_append_uint32(duckdb_appender appender, uint32_t value) {
	return duckdb_ext_api->duckdb_append_uint32(appender, value);
}

static duckdb_state duckdb_append_uint64(duckdb_appender appender, uint64_t value) {
	return duckdb_ext_api->duckdb_append_uint64(appender, value);
}

static duckdb_state duckdb_append_uhugeint(duckdb_appender appender, duckdb_uhugeint value) {
	return duckdb_ext_api->duckdb_append_uhugeint(appender, value);
}

static duckdb_state duckdb_append_float(duckdb_appender appender, float value) {
	return duckdb_ext_api->duckdb_append_float(appender, value);
}

static duckdb_state duckdb_append_double(duckdb_appender appender, double value) {
	return duckdb_ext_api->duckdb_append_double(appender, value);
}

static duckdb_state duckdb_append_date(duckdb_appender appender, duckdb_date value) {
	return duckdb_ext_api->duckdb_append_date(appender, value);
}

static duckdb_state duckdb_append_time(duckdb_appender appender, duckdb_time value) {
	return duckdb_ext_api->duckdb_append_time(appender, value);
}

static duckdb_state duckdb_append_timestamp(duckdb_appender appender, duckdb_timestamp value) {
	return duckdb_ext_api->duckdb_append_timestamp(appender, value);
}

static duckdb_state duckdb_append_interval(duckdb_appender appender, duckdb_interval value) {
	return duckdb_ext_api->duckdb_append_interval(appender, value);
}

static duckdb_state duckdb_append_varchar(duckdb_appender appender, const char *val) {
	return duckdb_ext_api->duckdb_append_varchar(appender, val);
}

static duckdb_state duckdb_append_varchar_length(duckdb_appender appender, const char *val, idx_t length) {
	return duckdb_ext_api->duckdb_append_varchar_length(appender, val, length);
}

static duckdb_state duckdb_append_blob(duckdb_appender appender, const void *data, idx_t length) {
	return duckdb_ext_api->duckdb_append_blob(appender, data, length);
}

static duckdb_state duckdb_append_null(duckdb_appender appender) {
	return duckdb_ext_api->duckdb_append_null(appender);
}

static duckdb_state duckdb_append_data_chunk(duckdb_appender appender, duckdb_data_chunk chunk) {
	return duckdb_ext_api->duckdb_append_data_chunk(appender, chunk);
}

static void duckdb_execute_tasks(duckdb_database database, idx_t max_tasks) {
	return duckdb_ext_api->duckdb_execute_tasks(database, max_tasks);
}

static duckdb_task_state duckdb_create_task_state(duckdb_database database) {
	return duckdb_ext_api->duckdb_create_task_state(database);
}

static void duckdb_execute_tasks_state(duckdb_task_state state) {
	return duckdb_ext_api->duckdb_execute_tasks_state(state);
}

static idx_t duckdb_execute_n_tasks_state(duckdb_task_state state, idx_t max_tasks) {
	return duckdb_ext_api->duckdb_execute_n_tasks_state(state, max_tasks);
}

static void duckdb_finish_execution(duckdb_task_state state) {
	return duckdb_ext_api->duckdb_finish_execution(state);
}

static bool duckdb_task_state_is_finished(duckdb_task_state state) {
	return duckdb_ext_api->duckdb_task_state_is_finished(state);
}

static void duckdb_destroy_task_state(duckdb_task_state state) {
	return duckdb_ext_api->duckdb_destroy_task_state(state);
}

static bool duckdb_execution_is_finished(duckdb_connection con) {
	return duckdb_ext_api->duckdb_execution_is_finished(con);
}

static duckdb_profiling_info duckdb_get_profiling_info(duckdb_connection connection) {
	return duckdb_ext_api->duckdb_get_profiling_info(connection);
}

static duckdb_value duckdb_profiling_info_get_value(duckdb_profiling_info info, const char *key) {
	return duckdb_ext_api->duckdb_profiling_info_get_value(info, key);
}

static idx_t duckdb_profiling_info_get_child_count(duckdb_profiling_info info) {
	return duckdb_ext_api->duckdb_profiling_info_get_child_count(info);
}

static duckdb_profiling_info duckdb_profiling_info_get_child(duckdb_profiling_info info, idx_t index) {
	return duckdb_ext_api->duckdb_profiling_info_get_child(info, index);
}

static duckdb_value duckdb_profiling_info_get_metrics(duckdb_profiling_info info) {
	return duckdb_ext_api->duckdb_profiling_info_get_metrics(info);
}

static void duckdb_scalar_function_set_varargs(duckdb_scalar_function scalar_function, duckdb_logical_type type) {
	return duckdb_ext_api->duckdb_scalar_function_set_varargs(scalar_function, type);
}

static void duckdb_scalar_function_set_special_handling(duckdb_scalar_function scalar_function) {
	return duckdb_ext_api->duckdb_scalar_function_set_special_handling(scalar_function);
}

static void duckdb_scalar_function_set_volatile(duckdb_scalar_function scalar_function) {
	return duckdb_ext_api->duckdb_scalar_function_set_volatile(scalar_function);
}

static void *duckdb_scalar_function_get_extra_info(duckdb_function_info info) {
	return duckdb_ext_api->duckdb_scalar_function_get_extra_info(info);
}

static void duckdb_scalar_function_set_error(duckdb_function_info info, const char *error) {
	return duckdb_ext_api->duckdb_scalar_function_set_error(info, error);
}

static duckdb_state duckdb_table_description_create(duckdb_connection connection, const char *schema, const char *table,
                                                    duckdb_table_description *out) {
	return duckdb_ext_api->duckdb_table_description_create(connection, schema, table, out);
}

static void duckdb_table_description_destroy(duckdb_table_description *table_description) {
	return duckdb_ext_api->duckdb_table_description_destroy(table_description);
}

static const char *duckdb_table_description_error(duckdb_table_description table_description) {
	return duckdb_ext_api->duckdb_table_description_error(table_description);
}

static duckdb_error_type duckdb_result_error_type(duckdb_result *result) {
	return duckdb_ext_api->duckdb_result_error_type(result);
}

static uint32_t duckdb_string_t_length(duckdb_string_t string) {
	return duckdb_ext_api->duckdb_string_t_length(string);
}

static const char *duckdb_string_t_data(duckdb_string_t *string) {
	return duckdb_ext_api->duckdb_string_t_data(string);
}

static duckdb_value duckdb_create_bool(bool input) {
	return duckdb_ext_api->duckdb_create_bool(input);
}

static duckdb_value duckdb_create_int8(int8_t input) {
	return duckdb_ext_api->duckdb_create_int8(input);
}

static duckdb_value duckdb_create_uint8(uint8_t input) {
	return duckdb_ext_api->duckdb_create_uint8(input);
}

static duckdb_value duckdb_create_int16(int16_t input) {
	return duckdb_ext_api->duckdb_create_int16(input);
}

static duckdb_value duckdb_create_uint16(uint16_t input) {
	return duckdb_ext_api->duckdb_create_uint16(input);
}

static duckdb_value duckdb_create_int32(int32_t input) {
	return duckdb_ext_api->duckdb_create_int32(input);
}

static duckdb_value duckdb_create_uint32(uint32_t input) {
	return duckdb_ext_api->duckdb_create_uint32(input);
}

static duckdb_value duckdb_create_uint64(uint64_t input) {
	return duckdb_ext_api->duckdb_create_uint64(input);
}

static duckdb_value duckdb_create_hugeint(duckdb_hugeint input) {
	return duckdb_ext_api->duckdb_create_hugeint(input);
}

static duckdb_value duckdb_create_uhugeint(duckdb_uhugeint input) {
	return duckdb_ext_api->duckdb_create_uhugeint(input);
}

static duckdb_value duckdb_create_float(float input) {
	return duckdb_ext_api->duckdb_create_float(input);
}

static duckdb_value duckdb_create_double(double input) {
	return duckdb_ext_api->duckdb_create_double(input);
}

static duckdb_value duckdb_create_date(duckdb_date input) {
	return duckdb_ext_api->duckdb_create_date(input);
}

static duckdb_value duckdb_create_time(duckdb_time input) {
	return duckdb_ext_api->duckdb_create_time(input);
}

static duckdb_value duckdb_create_time_tz_value(duckdb_time_tz value) {
	return duckdb_ext_api->duckdb_create_time_tz_value(value);
}

static duckdb_value duckdb_create_timestamp(duckdb_timestamp input) {
	return duckdb_ext_api->duckdb_create_timestamp(input);
}

static duckdb_value duckdb_create_interval(duckdb_interval input) {
	return duckdb_ext_api->duckdb_create_interval(input);
}

static duckdb_value duckdb_create_blob(const uint8_t *data, idx_t length) {
	return duckdb_ext_api->duckdb_create_blob(data, length);
}

static bool duckdb_get_bool(duckdb_value val) {
	return duckdb_ext_api->duckdb_get_bool(val);
}

static int8_t duckdb_get_int8(duckdb_value val) {
	return duckdb_ext_api->duckdb_get_int8(val);
}

static uint8_t duckdb_get_uint8(duckdb_value val) {
	return duckdb_ext_api->duckdb_get_uint8(val);
}

static int16_t duckdb_get_int16(duckdb_value val) {
	return duckdb_ext_api->duckdb_get_int16(val);
}

static uint16_t duckdb_get_uint16(duckdb_value val) {
	return duckdb_ext_api->duckdb_get_uint16(val);
}

static int32_t duckdb_get_int32(duckdb_value val) {
	return duckdb_ext_api->duckdb_get_int32(val);
}

static uint32_t duckdb_get_uint32(duckdb_value val) {
	return duckdb_ext_api->duckdb_get_uint32(val);
}

static uint64_t duckdb_get_uint64(duckdb_value val) {
	return duckdb_ext_api->duckdb_get_uint64(val);
}

static duckdb_hugeint duckdb_get_hugeint(duckdb_value val) {
	return duckdb_ext_api->duckdb_get_hugeint(val);
}

static duckdb_uhugeint duckdb_get_uhugeint(duckdb_value val) {
	return duckdb_ext_api->duckdb_get_uhugeint(val);
}

static float duckdb_get_float(duckdb_value val) {
	return duckdb_ext_api->duckdb_get_float(val);
}

static double duckdb_get_double(duckdb_value val) {
	return duckdb_ext_api->duckdb_get_double(val);
}

static duckdb_date duckdb_get_date(duckdb_value val) {
	return duckdb_ext_api->duckdb_get_date(val);
}

static duckdb_time duckdb_get_time(duckdb_value val) {
	return duckdb_ext_api->duckdb_get_time(val);
}

static duckdb_time_tz duckdb_get_time_tz(duckdb_value val) {
	return duckdb_ext_api->duckdb_get_time_tz(val);
}

static duckdb_timestamp duckdb_get_timestamp(duckdb_value val) {
	return duckdb_ext_api->duckdb_get_timestamp(val);
}

static duckdb_interval duckdb_get_interval(duckdb_value val) {
	return duckdb_ext_api->duckdb_get_interval(val);
}

static duckdb_logical_type duckdb_get_value_type(duckdb_value val) {
	return duckdb_ext_api->duckdb_get_value_type(val);
}

static duckdb_blob duckdb_get_blob(duckdb_value val) {
	return duckdb_ext_api->duckdb_get_blob(val);
}

static duckdb_scalar_function_set duckdb_create_scalar_function_set(const char *name) {
	return duckdb_ext_api->duckdb_create_scalar_function_set(name);
}

static void duckdb_destroy_scalar_function_set(duckdb_scalar_function_set *scalar_function_set) {
	return duckdb_ext_api->duckdb_destroy_scalar_function_set(scalar_function_set);
}

static duckdb_state duckdb_add_scalar_function_to_set(duckdb_scalar_function_set set, duckdb_scalar_function function) {
	return duckdb_ext_api->duckdb_add_scalar_function_to_set(set, function);
}

static duckdb_state duckdb_register_scalar_function_set(duckdb_connection con, duckdb_scalar_function_set set) {
	return duckdb_ext_api->duckdb_register_scalar_function_set(con, set);
}

static duckdb_aggregate_function_set duckdb_create_aggregate_function_set(const char *name) {
	return duckdb_ext_api->duckdb_create_aggregate_function_set(name);
}

static void duckdb_destroy_aggregate_function_set(duckdb_aggregate_function_set *aggregate_function_set) {
	return duckdb_ext_api->duckdb_destroy_aggregate_function_set(aggregate_function_set);
}

static duckdb_state duckdb_add_aggregate_function_to_set(duckdb_aggregate_function_set set,
                                                         duckdb_aggregate_function function) {
	return duckdb_ext_api->duckdb_add_aggregate_function_to_set(set, function);
}

static duckdb_state duckdb_register_aggregate_function_set(duckdb_connection con, duckdb_aggregate_function_set set) {
	return duckdb_ext_api->duckdb_register_aggregate_function_set(con, set);
}

static idx_t duckdb_get_map_size(duckdb_value value) {
	return duckdb_ext_api->duckdb_get_map_size(value);
}

static duckdb_value duckdb_get_map_key(duckdb_value value, idx_t index) {
	return duckdb_ext_api->duckdb_get_map_key(value, index);
}

static duckdb_value duckdb_get_map_value(duckdb_value value, idx_t index) {
	return duckdb_ext_api->duckdb_get_map_value(value, index);
}

static duckdb_aggregate_function duckdb_create_aggregate_function() {
	return duckdb_ext_api->duckdb_create_aggregate_function();
}

static void duckdb_destroy_aggregate_function(duckdb_aggregate_function *aggregate_function) {
	return duckdb_ext_api->duckdb_destroy_aggregate_function(aggregate_function);
}

static void duckdb_aggregate_function_set_name(duckdb_aggregate_function aggregate_function, const char *name) {
	return duckdb_ext_api->duckdb_aggregate_function_set_name(aggregate_function, name);
}

static void duckdb_aggregate_function_add_parameter(duckdb_aggregate_function aggregate_function,
                                                    duckdb_logical_type type) {
	return duckdb_ext_api->duckdb_aggregate_function_add_parameter(aggregate_function, type);
}

static void duckdb_aggregate_function_set_return_type(duckdb_aggregate_function aggregate_function,
                                                      duckdb_logical_type type) {
	return duckdb_ext_api->duckdb_aggregate_function_set_return_type(aggregate_function, type);
}

static void duckdb_aggregate_function_set_functions(duckdb_aggregate_function aggregate_function,
                                                    duckdb_aggregate_state_size state_size,
                                                    duckdb_aggregate_init_t state_init,
                                                    duckdb_aggregate_update_t update,
                                                    duckdb_aggregate_combine_t combine,
                                                    duckdb_aggregate_finalize_t finalize) {
	return duckdb_ext_api->duckdb_aggregate_function_set_functions(aggregate_function, state_size, state_init, update,
	                                                               combine, finalize);
}

static void duckdb_aggregate_function_set_destructor(duckdb_aggregate_function aggregate_function,
                                                     duckdb_aggregate_destroy_t destroy) {
	return duckdb_ext_api->duckdb_aggregate_function_set_destructor(aggregate_function, destroy);
}

static duckdb_state duckdb_register_aggregate_function(duckdb_connection con,
                                                       duckdb_aggregate_function aggregate_function) {
	return duckdb_ext_api->duckdb_register_aggregate_function(con, aggregate_function);
}

static void duckdb_aggregate_function_set_special_handling(duckdb_aggregate_function aggregate_function) {
	return duckdb_ext_api->duckdb_aggregate_function_set_special_handling(aggregate_function);
}

static void duckdb_aggregate_function_set_extra_info(duckdb_aggregate_function aggregate_function, void *extra_info,
                                                     duckdb_delete_callback_t destroy) {
	return duckdb_ext_api->duckdb_aggregate_function_set_extra_info(aggregate_function, extra_info, destroy);
}

static void *duckdb_aggregate_function_get_extra_info(duckdb_function_info info) {
	return duckdb_ext_api->duckdb_aggregate_function_get_extra_info(info);
}

static void duckdb_aggregate_function_set_error(duckdb_function_info info, const char *error) {
	return duckdb_ext_api->duckdb_aggregate_function_set_error(info, error);
}

static void duckdb_logical_type_set_alias(duckdb_logical_type type, const char *alias) {
	return duckdb_ext_api->duckdb_logical_type_set_alias(type, alias);
}

static duckdb_state duckdb_register_logical_type(duckdb_connection con, duckdb_logical_type type,
                                                 duckdb_create_type_info info) {
	return duckdb_ext_api->duckdb_register_logical_type(con, type, info);
}

static duckdb_cast_function duckdb_create_cast_function() {
	return duckdb_ext_api->duckdb_create_cast_function();
}

static void duckdb_cast_function_set_source_type(duckdb_cast_function cast_function, duckdb_logical_type source_type) {
	return duckdb_ext_api->duckdb_cast_function_set_source_type(cast_function, source_type);
}

static void duckdb_cast_function_set_target_type(duckdb_cast_function cast_function, duckdb_logical_type target_type) {
	return duckdb_ext_api->duckdb_cast_function_set_target_type(cast_function, target_type);
}

static void duckdb_cast_function_set_implicit_cast_cost(duckdb_cast_function cast_function, int64_t cost) {
	return duckdb_ext_api->duckdb_cast_function_set_implicit_cast_cost(cast_function, cost);
}

static void duckdb_cast_function_set_function(duckdb_cast_function cast_function, duckdb_cast_function_t function) {
	return duckdb_ext_api->duckdb_cast_function_set_function(cast_function, function);
}

static void duckdb_cast_function_set_extra_info(duckdb_cast_function cast_function, void *extra_info,
                                                duckdb_delete_callback_t destroy) {
	return duckdb_ext_api->duckdb_cast_function_set_extra_info(cast_function, extra_info, destroy);
}

static void *duckdb_cast_function_get_extra_info(duckdb_function_info info) {
	return duckdb_ext_api->duckdb_cast_function_get_extra_info(info);
}

static duckdb_cast_mode duckdb_cast_function_get_cast_mode(duckdb_function_info info) {
	return duckdb_ext_api->duckdb_cast_function_get_cast_mode(info);
}

static void duckdb_cast_function_set_error(duckdb_function_info info, const char *error) {
	return duckdb_ext_api->duckdb_cast_function_set_error(info, error);
}

static void duckdb_cast_function_set_row_error(duckdb_function_info info, const char *error, idx_t row,
                                               duckdb_vector output) {
	return duckdb_ext_api->duckdb_cast_function_set_row_error(info, error, row, output);
}

static duckdb_state duckdb_register_cast_function(duckdb_connection con, duckdb_cast_function cast_function) {
	return duckdb_ext_api->duckdb_register_cast_function(con, cast_function);
}

static void duckdb_destroy_cast_function(duckdb_cast_function *cast_function) {
	return duckdb_ext_api->duckdb_destroy_cast_function(cast_function);
}

static idx_t duckdb_row_count(duckdb_result *result) {
	return duckdb_ext_api->duckdb_row_count(result);
}

static void *duckdb_column_data(duckdb_result *result, idx_t col) {
	return duckdb_ext_api->duckdb_column_data(result, col);
}

static bool *duckdb_nullmask_data(duckdb_result *result, idx_t col) {
	return duckdb_ext_api->duckdb_nullmask_data(result, col);
}

static duckdb_data_chunk duckdb_result_get_chunk(duckdb_result result, idx_t chunk_index) {
	return duckdb_ext_api->duckdb_result_get_chunk(result, chunk_index);
}

static bool duckdb_result_is_streaming(duckdb_result result) {
	return duckdb_ext_api->duckdb_result_is_streaming(result);
}

static idx_t duckdb_result_chunk_count(duckdb_result result) {
	return duckdb_ext_api->duckdb_result_chunk_count(result);
}

static duckdb_result_type duckdb_result_return_type(duckdb_result result) {
	return duckdb_ext_api->duckdb_result_return_type(result);
}

static bool duckdb_value_boolean(duckdb_result *result, idx_t col, idx_t row) {
	return duckdb_ext_api->duckdb_value_boolean(result, col, row);
}

static int8_t duckdb_value_int8(duckdb_result *result, idx_t col, idx_t row) {
	return duckdb_ext_api->duckdb_value_int8(result, col, row);
}

static int16_t duckdb_value_int16(duckdb_result *result, idx_t col, idx_t row) {
	return duckdb_ext_api->duckdb_value_int16(result, col, row);
}

static int32_t duckdb_value_int32(duckdb_result *result, idx_t col, idx_t row) {
	return duckdb_ext_api->duckdb_value_int32(result, col, row);
}

static int64_t duckdb_value_int64(duckdb_result *result, idx_t col, idx_t row) {
	return duckdb_ext_api->duckdb_value_int64(result, col, row);
}

static duckdb_hugeint duckdb_value_hugeint(duckdb_result *result, idx_t col, idx_t row) {
	return duckdb_ext_api->duckdb_value_hugeint(result, col, row);
}

static duckdb_uhugeint duckdb_value_uhugeint(duckdb_result *result, idx_t col, idx_t row) {
	return duckdb_ext_api->duckdb_value_uhugeint(result, col, row);
}

static duckdb_decimal duckdb_value_decimal(duckdb_result *result, idx_t col, idx_t row) {
	return duckdb_ext_api->duckdb_value_decimal(result, col, row);
}

static uint8_t duckdb_value_uint8(duckdb_result *result, idx_t col, idx_t row) {
	return duckdb_ext_api->duckdb_value_uint8(result, col, row);
}

static uint16_t duckdb_value_uint16(duckdb_result *result, idx_t col, idx_t row) {
	return duckdb_ext_api->duckdb_value_uint16(result, col, row);
}

static uint32_t duckdb_value_uint32(duckdb_result *result, idx_t col, idx_t row) {
	return duckdb_ext_api->duckdb_value_uint32(result, col, row);
}

static uint64_t duckdb_value_uint64(duckdb_result *result, idx_t col, idx_t row) {
	return duckdb_ext_api->duckdb_value_uint64(result, col, row);
}

static float duckdb_value_float(duckdb_result *result, idx_t col, idx_t row) {
	return duckdb_ext_api->duckdb_value_float(result, col, row);
}

static double duckdb_value_double(duckdb_result *result, idx_t col, idx_t row) {
	return duckdb_ext_api->duckdb_value_double(result, col, row);
}

static duckdb_date duckdb_value_date(duckdb_result *result, idx_t col, idx_t row) {
	return duckdb_ext_api->duckdb_value_date(result, col, row);
}

static duckdb_time duckdb_value_time(duckdb_result *result, idx_t col, idx_t row) {
	return duckdb_ext_api->duckdb_value_time(result, col, row);
}

static duckdb_timestamp duckdb_value_timestamp(duckdb_result *result, idx_t col, idx_t row) {
	return duckdb_ext_api->duckdb_value_timestamp(result, col, row);
}

static duckdb_interval duckdb_value_interval(duckdb_result *result, idx_t col, idx_t row) {
	return duckdb_ext_api->duckdb_value_interval(result, col, row);
}

static char *duckdb_value_varchar(duckdb_result *result, idx_t col, idx_t row) {
	return duckdb_ext_api->duckdb_value_varchar(result, col, row);
}

static duckdb_string duckdb_value_string(duckdb_result *result, idx_t col, idx_t row) {
	return duckdb_ext_api->duckdb_value_string(result, col, row);
}

static char *duckdb_value_varchar_internal(duckdb_result *result, idx_t col, idx_t row) {
	return duckdb_ext_api->duckdb_value_varchar_internal(result, col, row);
}

static duckdb_string duckdb_value_string_internal(duckdb_result *result, idx_t col, idx_t row) {
	return duckdb_ext_api->duckdb_value_string_internal(result, col, row);
}

static duckdb_blob duckdb_value_blob(duckdb_result *result, idx_t col, idx_t row) {
	return duckdb_ext_api->duckdb_value_blob(result, col, row);
}

static bool duckdb_value_is_null(duckdb_result *result, idx_t col, idx_t row) {
	return duckdb_ext_api->duckdb_value_is_null(result, col, row);
}

static duckdb_state duckdb_execute_prepared_streaming(duckdb_prepared_statement prepared_statement,
                                                      duckdb_result *out_result) {
	return duckdb_ext_api->duckdb_execute_prepared_streaming(prepared_statement, out_result);
}

static duckdb_state duckdb_pending_prepared_streaming(duckdb_prepared_statement prepared_statement,
                                                      duckdb_pending_result *out_result) {
	return duckdb_ext_api->duckdb_pending_prepared_streaming(prepared_statement, out_result);
}

static duckdb_state duckdb_column_has_default(duckdb_table_description table_description, idx_t index, bool *out) {
	return duckdb_ext_api->duckdb_column_has_default(table_description, index, out);
}

static duckdb_state duckdb_query_arrow(duckdb_connection connection, const char *query, duckdb_arrow *out_result) {
	return duckdb_ext_api->duckdb_query_arrow(connection, query, out_result);
}

static duckdb_state duckdb_query_arrow_schema(duckdb_arrow result, duckdb_arrow_schema *out_schema) {
	return duckdb_ext_api->duckdb_query_arrow_schema(result, out_schema);
}

static duckdb_state duckdb_prepared_arrow_schema(duckdb_prepared_statement prepared, duckdb_arrow_schema *out_schema) {
	return duckdb_ext_api->duckdb_prepared_arrow_schema(prepared, out_schema);
}

static void duckdb_result_arrow_array(duckdb_result result, duckdb_data_chunk chunk, duckdb_arrow_array *out_array) {
	return duckdb_ext_api->duckdb_result_arrow_array(result, chunk, out_array);
}

static duckdb_state duckdb_query_arrow_array(duckdb_arrow result, duckdb_arrow_array *out_array) {
	return duckdb_ext_api->duckdb_query_arrow_array(result, out_array);
}

static idx_t duckdb_arrow_column_count(duckdb_arrow result) {
	return duckdb_ext_api->duckdb_arrow_column_count(result);
}

static idx_t duckdb_arrow_row_count(duckdb_arrow result) {
	return duckdb_ext_api->duckdb_arrow_row_count(result);
}

static idx_t duckdb_arrow_rows_changed(duckdb_arrow result) {
	return duckdb_ext_api->duckdb_arrow_rows_changed(result);
}

static const char *duckdb_query_arrow_error(duckdb_arrow result) {
	return duckdb_ext_api->duckdb_query_arrow_error(result);
}

static void duckdb_destroy_arrow(duckdb_arrow *result) {
	return duckdb_ext_api->duckdb_destroy_arrow(result);
}

static void duckdb_destroy_arrow_stream(duckdb_arrow_stream *stream_p) {
	return duckdb_ext_api->duckdb_destroy_arrow_stream(stream_p);
}

static duckdb_state duckdb_execute_prepared_arrow(duckdb_prepared_statement prepared_statement,
                                                  duckdb_arrow *out_result) {
	return duckdb_ext_api->duckdb_execute_prepared_arrow(prepared_statement, out_result);
}

static duckdb_state duckdb_arrow_scan(duckdb_connection connection, const char *table_name, duckdb_arrow_stream arrow) {
	return duckdb_ext_api->duckdb_arrow_scan(connection, table_name, arrow);
}

static duckdb_state duckdb_arrow_array_scan(duckdb_connection connection, const char *table_name,
                                            duckdb_arrow_schema arrow_schema, duckdb_arrow_array arrow_array,
                                            duckdb_arrow_stream *out_stream) {
	return duckdb_ext_api->duckdb_arrow_array_scan(connection, table_name, arrow_schema, arrow_array, out_stream);
}

static duckdb_data_chunk duckdb_stream_fetch_chunk(duckdb_result result) {
	return duckdb_ext_api->duckdb_stream_fetch_chunk(result);
}
